print("Start CartratBot")

from config import BOT_TOKEN

from db import get_all_brands, get_models_by_brand, get_model_details, get_connection

import telebot
from telebot import types

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
    bot.set_my_commands([
        types.BotCommand("/start", "Start the bot"),
        types.BotCommand("/help", "Get help"),
        types.BotCommand("/car", "My car"),
    ])
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    remove_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, 
                     "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–µ–Ω–µ–≥, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–∏ —Ç–æ–ø–ª–∏–≤–æ, —à—Ç—Ä–∞—Ñ—ã –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞.\n–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏ (\\help) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—èüòÅ\n\n",
                     reply_markup=remove_keyboard)
    

def update_user_car(user_id, brand_name, model_name, year_from, year_to, car_class):
    conn = get_connection()
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("""
        SELECT user_id FROM users_cars WHERE user_id = %s;
    """, (user_id,))
    result = cur.fetchone()

    if result:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        cur.execute("""
            UPDATE users_cars
            SET selected_car_brand = %s, selected_car_model = %s, selected_car_year_from = %s, 
                selected_car_year_to = %s, selected_car_class = %s
            WHERE user_id = %s;
        """, (brand_name, model_name, year_from, year_to, car_class, user_id))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        cur.execute("""
            INSERT INTO users_cars (user_id, selected_car_brand, selected_car_model, 
                                    selected_car_year_from, selected_car_year_to, selected_car_class)
            VALUES (%s, %s, %s, %s, %s, %s);
        """, (user_id, brand_name, model_name, year_from, year_to, car_class))

    conn.commit()
    cur.close()
    conn.close()

def get_user_car(user_id):
    conn = get_connection()
    cur = conn.cursor()

    cur.execute("""
        SELECT selected_car_brand, selected_car_model, selected_car_year_from, 
               selected_car_year_to, selected_car_class
        FROM users_cars
        WHERE user_id = %s;
    """, (user_id,))
    result = cur.fetchone()

    cur.close()
    conn.close()

    return result
    

@bot.message_handler(commands=["car"])
def car(message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
    brands = get_all_brands()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"))
    markup.add(types.KeyboardButton(text="–ú–æ–π –∞–≤—Ç–æ"))
    user_id = message.from_user.id
    car_details = get_user_car(user_id)
    if car_details:
        markup.add(types.KeyboardButton(text="‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ"))
    
    bot.send_message(message.chat.id, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ú–æ–π –∞–≤—Ç–æ'", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ")
def confirm_car_reset(message):
    warning_text = (
        "‚ùó –£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n"
        "–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ –∞–≤—Ç–æ, –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–≤—Ç–æ"))
    markup.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    bot.send_message(message.chat.id, warning_text, reply_markup=markup)

pending_reset = set()  # chat_id'—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —Å–±—Ä–æ—Å (–ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–µ—Ä–µ—Ç –Ω–æ–≤—ã–π –∞–≤—Ç–æ –æ–Ω –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–≤—Ç–æ")
def approve_reset(message):
    user_id = message.from_user.id
    pending_reset.add(user_id)

    # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –¥–æ–±–∞–≤–∏–º —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤)
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("DELETE FROM users_cars WHERE user_id = %s", (user_id,))
    # cur.execute("DELETE FROM car_expenses WHERE user_id = %s", (user_id,))  # –µ—Å–ª–∏ –µ—Å—Ç—å
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:")
    search_brand(message)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤—ã–±–æ—Ä –º–∞—Ä–∫–∏

@bot.message_handler(func=lambda message: message.text == "–ú–æ–π –∞–≤—Ç–æ")
def my_car(message):
    user_id = message.from_user.id
    car_details = get_user_car(user_id)

    if car_details:
        brand_name, model_name, year_from, year_to, car_class = car_details
        text = f"üöó –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{brand_name} {model_name}</b>\n" \
               f"–ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞: {year_from}‚Äì{year_to}\n" \
               f"–ö–ª–∞—Å—Å: {car_class}"
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫."

    bot.send_message(message.chat.id, text, parse_mode='HTML')

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏")
def search_brand(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã:")
    bot.register_next_step_handler(msg, process_brand_search)

def process_brand_search(message):
    search_text = message.text.lower()
    all_brands = get_all_brands()
    matching_brands = [brand for brand in all_brands if brand.lower().startswith(search_text)]

    if matching_brands:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        brand_buttons = [types.KeyboardButton(text=brand) for brand in matching_brands[:10]]
        markup.add(*brand_buttons)
        markup.add(types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"), types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        
        msg = bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ {len(matching_brands)} –º–∞—Ä–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É:", reply_markup=markup)

        # –í–æ—Ç —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç:
        bot.register_next_step_handler(msg, process_brand_selection)

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"), types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        
        bot.send_message(message.chat.id, "–ú–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å:", reply_markup=markup)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
user_selected_brand = {}

def process_brand_selection(message):
    brand = message.text.strip()
    user_selected_brand[message.chat.id] = brand
    models = get_models_by_brand(brand)

    if models:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for model in models:
            markup.add(types.KeyboardButton(text=model))
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ä–∫–∏ {brand}:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_model_selection)
    else:
        bot.send_message(message.chat.id, f"–î–ª—è –º–∞—Ä–∫–∏ {brand} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π.")

def process_model_selection(message):
    model = message.text.strip()
    user_id = message.from_user.id
    brand = user_selected_brand.get(message.chat.id)

    if not brand:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    if get_user_car(user_id) and user_id not in pending_reset:
        bot.send_message(message.chat.id,
                     "–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ' –≤ –º–µ–Ω—é.")
        return

    details = get_model_details(brand, model)
    if details:
        brand_name, model_name, year_from, year_to, car_class, class_description = details

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_user_car(user_id, brand_name, model_name, year_from, year_to, car_class)

        #—É–¥–∞–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –Ω–∞ —Å–±—Ä–æ—Å (–º–æ–µ–≥–æ –∞–≤—Ç–æ)
        if user_id in pending_reset:
            pending_reset.remove(user_id)

        text = f"üöó <b>{brand_name} {model_name}</b>\n" \
               f"–ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞: {year_from}‚Äì{year_to}\n" \
               f"–ö–ª–∞—Å—Å: {car_class} ({class_description})"
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def update_user_car(user_id, brand_name, model_name, year_from, year_to, car_class):
    conn = get_connection()
    cur = conn.cursor()

    cur.execute("SELECT user_id FROM users_cars WHERE user_id = %s", (user_id,))
    result = cur.fetchone()

    if result:
        cur.execute("""
            UPDATE users_cars
            SET selected_car_brand = %s, selected_car_model = %s,
                selected_car_year_from = %s, selected_car_year_to = %s,
                selected_car_class = %s
            WHERE user_id = %s
        """, (brand_name, model_name, year_from, year_to, car_class, user_id))
    else:
        cur.execute("""
            INSERT INTO users_cars (user_id, selected_car_brand, selected_car_model,
                                    selected_car_year_from, selected_car_year_to,
                                    selected_car_class)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (user_id, brand_name, model_name, year_from, year_to, car_class))

    conn.commit()
    cur.close()
    conn.close()

bot.infinity_polling()


