print("Start CartratBot")

from config import BOT_TOKEN

from db import get_all_brands, get_models_by_brand, get_model_details, get_connection, update_user_car, get_user_car, delete_user_car

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup     # FSM
from telebot.types import ReplyKeyboardRemove               # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from telebot.storage import StateMemoryStorage              # –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class CarStates(StatesGroup):
    #WaitingStart = State()
    WaitingForMycar = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ "üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞"
    WaitingForBrandSearch = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ "üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"
    WaitingChangingTheCar = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ "‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ"
    WaitingDeleteACar = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ"
    WaitingForExpenses = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ "‚õΩ –†–∞—Å—Ö–æ–¥—ã"

@bot.message_handler(commands=['kotik'])
def send_help(message):
    help_text = (
        "–Ø (–ï–≥–æ—Ä), –æ—á–µ–Ω—å –ª—é–±–ª—é –º–æ–µ–≥–æ –ö–æ—Ç–∏–∫–∞ ‚ù§Ô∏è\n"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')


@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "–≠—Ç–æ CartratBot ‚Äì –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "- –£—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n"
        "- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¢–û –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /car –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')
# –ó–¥–µ—Å—å –Ω–∞–¥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ. 
# –° –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–ú–æ–π –∞–≤—Ç–æ" "–†–∞—Å—Ö–æ–¥—ã"
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç "–ú–æ—è –º–∞—à–∏–Ω–∞" –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É –µ–≥–æ –∞–≤—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å "—É–¥–∞–ª–∏—Ç—å" –∏–ª–∏ "—Å–º–µ–Ω–∏—Ç—å"
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç "–†–∞—Å—Ö–æ–¥—ã" —Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –µ–º—É —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∞–≤—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥

@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    try:
        state = bot.get_state(message.from_user.id, message.chat.id)
        if state and state != State.DEFAULT_STATE:
            bot.delete_state(message.from_user.id, message.chat.id)
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot.set_my_commands([
        types.BotCommand("/start", "–†–∞–∑–±—É–¥–∏—Ç—å –±–æ—Ç–∞"),
    ])

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("SELECT user_id FROM users_cars WHERE user_id = %s;", (user_id,))
    result = cur.fetchone()

    if result:
        text = (
            "–ò —Å–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å?\n"
        )
    else:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ CartratBot ‚Äì –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n"
            "–ù–∞–∂–º–∏—Ç–µ /car –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        cur.execute("""
            INSERT INTO users_cars (user_id, selected_car_brand, selected_car_model, selected_car_year_from, selected_car_year_to, selected_car_class)
            VALUES (%s, 0, 0, 0, 0, 0)
            ON CONFLICT (user_id) DO NOTHING;
        """, (user_id,))
    
    conn.commit()
    cur.close()
    conn.close()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞"))
    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è –º–∞—à–∏–Ω–∞" –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
# –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Tlegram API (Telegram API –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç " " –∫–∞–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã–π text. –û–Ω —Å—á–∏—Ç–∞–µ—Ç —ç—Ç–æ –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∞ –æ–Ω–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª—å –≤—Ö–æ–¥–∏—Ç –≤–æ –≤–∫–ª–∞–¥–∫—É "–ú–æ—è –º–∞—à–∏–Ω–∞", —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º (–ø—Ä–∏ —ç—Ç–æ–º –¥–æ–±–∞–≤–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
# –ò–ª–∏ –≥–æ–≤–æ—Ä–∏–º –µ–º—É –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–∞–º –≤—ã–∑–æ–≤–∞ –∫–ª–∞–≤–∏—à–∏ "üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"
@bot.message_handler(commands=['car'])
@bot.message_handler(func=lambda message: message.text == "üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞")
@bot.message_handler(state=CarStates.WaitingForMycar)
def car(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ú–æ—è –º–∞—à–∏–Ω–∞"
    bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForMycar –¥–ª—è {message.from_user.id}")
    # –°–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    user_id = message.from_user.id
    car_details = get_user_car(user_id)
    #brand_name = car_details[0]
    if car_details[0] != "0":
        brand = car_details[0]
        model = car_details[1]
        details = get_model_details(brand, model)
        brand_name, model_name, year_from, year_to, car_class, class_description = details
        text = (
           f"üöó –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: <b>{brand_name} {model_name}</b>\n"
           f"–ì–æ–¥—ã –≤—ã–ø—É—Å–∫–∞: {year_from}‚Äì{year_to}\n"
           f"–ö–ª–∞—Å—Å: {car_class} ({class_description})"
        )
        markup.add(types.KeyboardButton(text="‚õΩ –†–∞—Å—Ö–æ–¥—ã"))
        markup.add(types.KeyboardButton(text="‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ"))
        markup.add(types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ"))

    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫."
        markup.add(types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏"))

    bot.send_message(message.chat.id, text, parse_mode='HTML', reply_markup=markup)


############################################
# –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–º–µ–Ω–æ–π –∞–≤—Ç–æ

pending_reset = set()  # chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —Å–±—Ä–æ—Å (–ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–µ—Ä–µ—Ç –Ω–æ–≤—ã–π –∞–≤—Ç–æ –æ–Ω –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ)
# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ, —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Ñ—É–Ω–∫–∏—é status_car_search
@bot.message_handler(func=lambda message: message.text == "‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ")
def change_car(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ú–æ—è –º–∞—à–∏–Ω–∞"
    bot.set_state(message.from_user.id, CarStates.WaitingChangingTheCar, message.chat.id)
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingChangingTheCar –¥–ª—è {message.from_user.id}")
    # –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è 
    warning_text = (
        "‚ùó –£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n"
        "–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ –∞–≤—Ç–æ, –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–≤—Ç–æ"))
    markup.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    bot.send_message(message.chat.id, warning_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∞–≤—Ç–æ")
def confirm_change_car(message):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
    # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_user_car(message.from_user.id)
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–æ–π –º–∞—à–∏–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã ü´°", reply_markup=markup)
    pending_reset.add(user_id) # –î–æ–±–∞–≤–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –Ω–∞ —Å–±—Ä–æ—Å (–º–æ–µ–≥–æ –∞–≤—Ç–æ)
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.delete_state(message.from_user.id, message.chat.id)
    return status_car_search(message)

@bot.message_handler(func=lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_change_car(message):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞"))
    bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã üéâ", reply_markup=markup)
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.delete_state(message.from_user.id, message.chat.id)
    return 

############################################
# –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ

# –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ù–û–í–£–Æ –§–£–ù–ö–ò–Æ –ö–û–¢–û–†–ê–Ø –ë–£–î–ï–¢ –í–´–´–û–î–ò–¢–¨ –¢–û–õ–¨–ö–û –ö–ù–û–ü–ö–£ –ú–û–Ø –ú–ê–®–ò–ù–ê –ë–ï–ó –ù–ê–î–ü–ò–°–ï–ô 
@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ")
def delete_a_car(message):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ú–æ—è –º–∞—à–∏–Ω–∞"
    bot.set_state(message.from_user.id, CarStates.WaitingChangingTheCar, message.chat.id)
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingChangingTheCar –¥–ª—è {message.from_user.id}")
    # –ù—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è 
    warning_text = (
        "‚ùó –£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n"
        "–ï—Å–ª–∏ –≤—ã —Å–º–µ–Ω–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∞–≤—Ç–æ, –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"))
    markup.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    bot.send_message(message.chat.id, warning_text, reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
def confirm_change_car(message):
    # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
    # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    delete_user_car(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞"))
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–æ–π –º–∞—à–∏–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã ü´°", reply_markup=markup)
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.delete_state(message.from_user.id, message.chat.id)
    return

############################################
# –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ


@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –º–∞—Ä–∫–∏")
def status_car_search(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ "–ü–æ–∏—Å–∫–∞ –º–∞—Ä–∫–∏"
    bot.set_state(message.from_user.id, CarStates.WaitingForBrandSearch, message.chat.id)
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WaitingForBrandSearch –¥–ª—è {message.from_user.id}")
    # –°–º–æ—Ç—Ä–∏–º –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–º–µ–Ω–∏—Ç—å –∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ú–æ—è –º–∞—à–∏–Ω–∞"
    car_details = get_user_car(message.from_user.id)
    brand_name = car_details[0]
    if brand_name != "0" and message.from_user.id not in pending_reset:
        bot.send_message(message.chat.id,
                     "–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ö†Ô∏è –°–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ' –≤ –º–µ–Ω—é.")
        return car(message)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã:", reply_markup=markup)
    # –ü–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–∏
    bot.register_next_step_handler(msg, process_brand_search)
def process_brand_search(message):

    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
        return car(message)
    
    search_text = message.text.lower()
    all_brands = get_all_brands()
    matching_brands = [brand for brand in all_brands if brand.lower().startswith(search_text)]

    if matching_brands:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        brand_buttons = [types.KeyboardButton(text=brand) for brand in matching_brands]
        markup.add(*brand_buttons)
        markup.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
        
        msg = bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ {len(matching_brands)} –º–∞—Ä–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_brand_selection)

    else:
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, "–ú–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=markup)
        return car(message)
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
user_selected_brand = {}
def process_brand_selection(message):

    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
        return car(message)

    brand = message.text.strip()
    user_selected_brand[message.chat.id] = brand
    models = get_models_by_brand(brand)

    if models:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        for model in models:
            markup.add(types.KeyboardButton(text=model))
        markup.add(types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ä–∫–∏ {brand}:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_model_selection)
    else:
        bot.send_message(message.chat.id, f"–î–ª—è –º–∞—Ä–∫–∏ {brand} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π.")
        return car(message)

def process_model_selection(message):

    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        bot.set_state(message.from_user.id, CarStates.WaitingForMycar, message.chat.id)
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é WaitingForMycar")
        return car(message)

    user_id = message.from_user.id
    brand = user_selected_brand[user_id]
    model = message.text.strip()
    
    details = get_model_details(brand, model)
    if details:
        brand_name, model_name, year_from, year_to, car_class, class_description = details

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_user_car(user_id, brand_name, model_name, year_from, year_to, car_class)

        #—É–¥–∞–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –Ω–∞ —Å–±—Ä–æ—Å (–º–æ–µ–≥–æ –∞–≤—Ç–æ)
        if user_id in pending_reset:
            pending_reset.remove(user_id)

        return car(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton(text="üèéÔ∏è –ú–æ—è –º–∞—à–∏–Ω–∞"))
        bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=markup)

bot.infinity_polling()


